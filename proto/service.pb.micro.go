// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/service.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProcessService service

func NewProcessServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProcessService service

type ProcessService interface {
	Spawn(ctx context.Context, in *SpawnRequest, opts ...client.CallOption) (*SpawnResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Kill(ctx context.Context, in *KillRequest, opts ...client.CallOption) (*KillResponse, error)
	KillAll(ctx context.Context, in *KillAllRequest, opts ...client.CallOption) (*KillAllResponse, error)
}

type processService struct {
	c    client.Client
	name string
}

func NewProcessService(name string, c client.Client) ProcessService {
	return &processService{
		c:    c,
		name: name,
	}
}

func (c *processService) Spawn(ctx context.Context, in *SpawnRequest, opts ...client.CallOption) (*SpawnResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.Spawn", in)
	out := new(SpawnResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) Kill(ctx context.Context, in *KillRequest, opts ...client.CallOption) (*KillResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.Kill", in)
	out := new(KillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) KillAll(ctx context.Context, in *KillAllRequest, opts ...client.CallOption) (*KillAllResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.KillAll", in)
	out := new(KillAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProcessService service

type ProcessServiceHandler interface {
	Spawn(context.Context, *SpawnRequest, *SpawnResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Kill(context.Context, *KillRequest, *KillResponse) error
	KillAll(context.Context, *KillAllRequest, *KillAllResponse) error
}

func RegisterProcessServiceHandler(s server.Server, hdlr ProcessServiceHandler, opts ...server.HandlerOption) error {
	type processService interface {
		Spawn(ctx context.Context, in *SpawnRequest, out *SpawnResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Kill(ctx context.Context, in *KillRequest, out *KillResponse) error
		KillAll(ctx context.Context, in *KillAllRequest, out *KillAllResponse) error
	}
	type ProcessService struct {
		processService
	}
	h := &processServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProcessService{h}, opts...))
}

type processServiceHandler struct {
	ProcessServiceHandler
}

func (h *processServiceHandler) Spawn(ctx context.Context, in *SpawnRequest, out *SpawnResponse) error {
	return h.ProcessServiceHandler.Spawn(ctx, in, out)
}

func (h *processServiceHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.ProcessServiceHandler.List(ctx, in, out)
}

func (h *processServiceHandler) Kill(ctx context.Context, in *KillRequest, out *KillResponse) error {
	return h.ProcessServiceHandler.Kill(ctx, in, out)
}

func (h *processServiceHandler) KillAll(ctx context.Context, in *KillAllRequest, out *KillAllResponse) error {
	return h.ProcessServiceHandler.KillAll(ctx, in, out)
}
