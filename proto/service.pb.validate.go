// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/service.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SpawnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SpawnRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SpawnRequestValidationError is the validation error returned by
// SpawnRequest.Validate if the designated constraints aren't met.
type SpawnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpawnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpawnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpawnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpawnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpawnRequestValidationError) ErrorName() string { return "SpawnRequestValidationError" }

// Error satisfies the builtin error interface
func (e SpawnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpawnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpawnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpawnRequestValidationError{}

// Validate checks the field values on SpawnResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SpawnResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpawnResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SpawnResponseValidationError is the validation error returned by
// SpawnResponse.Validate if the designated constraints aren't met.
type SpawnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpawnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpawnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpawnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpawnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpawnResponseValidationError) ErrorName() string { return "SpawnResponseValidationError" }

// Error satisfies the builtin error interface
func (e SpawnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpawnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpawnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpawnResponseValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on KillRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KillRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Pid

	return nil
}

// KillRequestValidationError is the validation error returned by
// KillRequest.Validate if the designated constraints aren't met.
type KillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KillRequestValidationError) ErrorName() string { return "KillRequestValidationError" }

// Error satisfies the builtin error interface
func (e KillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KillRequestValidationError{}

// Validate checks the field values on KillResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KillResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KillResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// KillResponseValidationError is the validation error returned by
// KillResponse.Validate if the designated constraints aren't met.
type KillResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KillResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KillResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KillResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KillResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KillResponseValidationError) ErrorName() string { return "KillResponseValidationError" }

// Error satisfies the builtin error interface
func (e KillResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKillResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KillResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KillResponseValidationError{}

// Validate checks the field values on KillAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KillAllRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Pid

	return nil
}

// KillAllRequestValidationError is the validation error returned by
// KillAllRequest.Validate if the designated constraints aren't met.
type KillAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KillAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KillAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KillAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KillAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KillAllRequestValidationError) ErrorName() string { return "KillAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e KillAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKillAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KillAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KillAllRequestValidationError{}

// Validate checks the field values on KillAllResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *KillAllResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KillAllResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// KillAllResponseValidationError is the validation error returned by
// KillAllResponse.Validate if the designated constraints aren't met.
type KillAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KillAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KillAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KillAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KillAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KillAllResponseValidationError) ErrorName() string { return "KillAllResponseValidationError" }

// Error satisfies the builtin error interface
func (e KillAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKillAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KillAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KillAllResponseValidationError{}
